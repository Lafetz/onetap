// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tier_queries.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const CreateCustomerTier = `-- name: CreateCustomerTier :exec
INSERT INTO customer_tier (merchant_id, customer_id, tier_name, points, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateCustomerTierParams struct {
	MerchantID uuid.UUID
	CustomerID uuid.UUID
	TierName   string
	Points     int32
}

func (q *Queries) CreateCustomerTier(ctx context.Context, arg CreateCustomerTierParams) error {
	_, err := q.db.ExecContext(ctx, CreateCustomerTier,
		arg.MerchantID,
		arg.CustomerID,
		arg.TierName,
		arg.Points,
	)
	return err
}

const CreateTierLevel = `-- name: CreateTierLevel :exec
INSERT INTO tier_level (tier_id, merchant_id, name, min_points, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateTierLevelParams struct {
	TierID     uuid.UUID
	MerchantID uuid.UUID
	Name       string
	MinPoints  int32
}

func (q *Queries) CreateTierLevel(ctx context.Context, arg CreateTierLevelParams) error {
	_, err := q.db.ExecContext(ctx, CreateTierLevel,
		arg.TierID,
		arg.MerchantID,
		arg.Name,
		arg.MinPoints,
	)
	return err
}

const DeleteCustomerTier = `-- name: DeleteCustomerTier :exec
DELETE FROM customer_tier
WHERE merchant_id = $1 AND customer_id = $2
`

type DeleteCustomerTierParams struct {
	MerchantID uuid.UUID
	CustomerID uuid.UUID
}

func (q *Queries) DeleteCustomerTier(ctx context.Context, arg DeleteCustomerTierParams) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomerTier, arg.MerchantID, arg.CustomerID)
	return err
}

const DeleteTierLevel = `-- name: DeleteTierLevel :exec
DELETE FROM tier_level
WHERE merchant_id = $1 AND name = $2
`

type DeleteTierLevelParams struct {
	MerchantID uuid.UUID
	Name       string
}

func (q *Queries) DeleteTierLevel(ctx context.Context, arg DeleteTierLevelParams) error {
	_, err := q.db.ExecContext(ctx, DeleteTierLevel, arg.MerchantID, arg.Name)
	return err
}

const GetCustomerTier = `-- name: GetCustomerTier :one
SELECT merchant_id, customer_id, tier_name, points, created_at, updated_at
FROM customer_tier
WHERE merchant_id = $1 AND customer_id = $2
`

type GetCustomerTierParams struct {
	MerchantID uuid.UUID
	CustomerID uuid.UUID
}

func (q *Queries) GetCustomerTier(ctx context.Context, arg GetCustomerTierParams) (CustomerTier, error) {
	row := q.db.QueryRowContext(ctx, GetCustomerTier, arg.MerchantID, arg.CustomerID)
	var i CustomerTier
	err := row.Scan(
		&i.MerchantID,
		&i.CustomerID,
		&i.TierName,
		&i.Points,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTierLevel = `-- name: GetTierLevel :one
SELECT tier_id,merchant_id, name, min_points, created_at, updated_at
FROM tier_level
WHERE merchant_id = $1 AND name = $2
`

type GetTierLevelParams struct {
	MerchantID uuid.UUID
	Name       string
}

func (q *Queries) GetTierLevel(ctx context.Context, arg GetTierLevelParams) (TierLevel, error) {
	row := q.db.QueryRowContext(ctx, GetTierLevel, arg.MerchantID, arg.Name)
	var i TierLevel
	err := row.Scan(
		&i.TierID,
		&i.MerchantID,
		&i.Name,
		&i.MinPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListTierLevels = `-- name: ListTierLevels :many
SELECT tier_id, merchant_id, name, min_points, created_at, updated_at
FROM tier_level
WHERE merchant_id = $1
ORDER BY min_points ASC
`

func (q *Queries) ListTierLevels(ctx context.Context, merchantID uuid.UUID) ([]TierLevel, error) {
	rows, err := q.db.QueryContext(ctx, ListTierLevels, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TierLevel
	for rows.Next() {
		var i TierLevel
		if err := rows.Scan(
			&i.TierID,
			&i.MerchantID,
			&i.Name,
			&i.MinPoints,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCustomerTier = `-- name: UpdateCustomerTier :exec
UPDATE customer_tier
SET tier_name = $3, points = $4, updated_at = NOW()
WHERE merchant_id = $1 AND customer_id = $2
`

type UpdateCustomerTierParams struct {
	MerchantID uuid.UUID
	CustomerID uuid.UUID
	TierName   string
	Points     int32
}

func (q *Queries) UpdateCustomerTier(ctx context.Context, arg UpdateCustomerTierParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCustomerTier,
		arg.MerchantID,
		arg.CustomerID,
		arg.TierName,
		arg.Points,
	)
	return err
}

const UpdateTierLevel = `-- name: UpdateTierLevel :exec
UPDATE tier_level
SET name = $2, min_points = $3, updated_at = NOW()
WHERE tier_id = $1
`

type UpdateTierLevelParams struct {
	TierID    uuid.UUID
	Name      string
	MinPoints int32
}

func (q *Queries) UpdateTierLevel(ctx context.Context, arg UpdateTierLevelParams) error {
	_, err := q.db.ExecContext(ctx, UpdateTierLevel, arg.TierID, arg.Name, arg.MinPoints)
	return err
}
