// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cashback_queries.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const CreateCashback = `-- name: CreateCashback :exec
INSERT INTO cashback (id, merchant_id, name, description, percentage, eligible_products, active, expiration, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())
`

type CreateCashbackParams struct {
	ID               uuid.UUID
	MerchantID       uuid.UUID
	Name             string
	Description      string
	Percentage       float64
	EligibleProducts []uuid.UUID
	Active           bool
	Expiration       time.Time
}

func (q *Queries) CreateCashback(ctx context.Context, arg CreateCashbackParams) error {
	_, err := q.db.ExecContext(ctx, CreateCashback,
		arg.ID,
		arg.MerchantID,
		arg.Name,
		arg.Description,
		arg.Percentage,
		pq.Array(arg.EligibleProducts),
		arg.Active,
		arg.Expiration,
	)
	return err
}

const CreateCashbackUser = `-- name: CreateCashbackUser :exec
INSERT INTO cashback_user (merchant_id,cashback_id, user_id, points)
VALUES ($1, $2, $3,$4)
`

type CreateCashbackUserParams struct {
	MerchantID uuid.UUID
	CashbackID uuid.UUID
	UserID     uuid.UUID
	Points     float64
}

func (q *Queries) CreateCashbackUser(ctx context.Context, arg CreateCashbackUserParams) error {
	_, err := q.db.ExecContext(ctx, CreateCashbackUser,
		arg.MerchantID,
		arg.CashbackID,
		arg.UserID,
		arg.Points,
	)
	return err
}

const DeleteCashback = `-- name: DeleteCashback :exec
DELETE FROM cashback WHERE id = $1
`

func (q *Queries) DeleteCashback(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCashback, id)
	return err
}

const DeleteCashbackUser = `-- name: DeleteCashbackUser :exec
DELETE FROM cashback_user WHERE user_id = $1 AND cashback_id = $2
`

type DeleteCashbackUserParams struct {
	UserID     uuid.UUID
	CashbackID uuid.UUID
}

func (q *Queries) DeleteCashbackUser(ctx context.Context, arg DeleteCashbackUserParams) error {
	_, err := q.db.ExecContext(ctx, DeleteCashbackUser, arg.UserID, arg.CashbackID)
	return err
}

const GetCashback = `-- name: GetCashback :one
SELECT id, merchant_id, name, description, percentage, eligible_products, active, expiration, created_at, updated_at FROM cashback WHERE id = $1
`

func (q *Queries) GetCashback(ctx context.Context, id uuid.UUID) (Cashback, error) {
	row := q.db.QueryRowContext(ctx, GetCashback, id)
	var i Cashback
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Name,
		&i.Description,
		&i.Percentage,
		pq.Array(&i.EligibleProducts),
		&i.Active,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCashbackUser = `-- name: GetCashbackUser :one
SELECT merchant_id, cashback_id, user_id, points FROM cashback_user WHERE user_id = $1 AND cashback_id = $2
`

type GetCashbackUserParams struct {
	UserID     uuid.UUID
	CashbackID uuid.UUID
}

func (q *Queries) GetCashbackUser(ctx context.Context, arg GetCashbackUserParams) (CashbackUser, error) {
	row := q.db.QueryRowContext(ctx, GetCashbackUser, arg.UserID, arg.CashbackID)
	var i CashbackUser
	err := row.Scan(
		&i.MerchantID,
		&i.CashbackID,
		&i.UserID,
		&i.Points,
	)
	return i, err
}

const ListCashbackUsers = `-- name: ListCashbackUsers :many
SELECT merchant_id, cashback_id, user_id, points FROM cashback_user
WHERE merchant_id = $1
`

func (q *Queries) ListCashbackUsers(ctx context.Context, merchantID uuid.UUID) ([]CashbackUser, error) {
	rows, err := q.db.QueryContext(ctx, ListCashbackUsers, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CashbackUser
	for rows.Next() {
		var i CashbackUser
		if err := rows.Scan(
			&i.MerchantID,
			&i.CashbackID,
			&i.UserID,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCashbacks = `-- name: ListCashbacks :many
SELECT id, merchant_id, name, description, percentage, eligible_products, active, expiration, created_at, updated_at FROM cashback WHERE merchant_id = $1
`

func (q *Queries) ListCashbacks(ctx context.Context, merchantID uuid.UUID) ([]Cashback, error) {
	rows, err := q.db.QueryContext(ctx, ListCashbacks, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cashback
	for rows.Next() {
		var i Cashback
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.Name,
			&i.Description,
			&i.Percentage,
			pq.Array(&i.EligibleProducts),
			&i.Active,
			&i.Expiration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCashback = `-- name: UpdateCashback :exec
UPDATE cashback
SET name = $2, description = $3, percentage = $4, eligible_products = $5, active = $6, expiration = $7, updated_at = NOW()
WHERE id = $1
`

type UpdateCashbackParams struct {
	ID               uuid.UUID
	Name             string
	Description      string
	Percentage       float64
	EligibleProducts []uuid.UUID
	Active           bool
	Expiration       time.Time
}

func (q *Queries) UpdateCashback(ctx context.Context, arg UpdateCashbackParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCashback,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Percentage,
		pq.Array(arg.EligibleProducts),
		arg.Active,
		arg.Expiration,
	)
	return err
}

const UpdateCashbackUser = `-- name: UpdateCashbackUser :exec
UPDATE cashback_user
SET points = $2
WHERE user_id = $1 AND cashback_id = $3
`

type UpdateCashbackUserParams struct {
	UserID     uuid.UUID
	Points     float64
	CashbackID uuid.UUID
}

func (q *Queries) UpdateCashbackUser(ctx context.Context, arg UpdateCashbackUserParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCashbackUser, arg.UserID, arg.Points, arg.CashbackID)
	return err
}
